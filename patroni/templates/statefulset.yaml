apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "patroni.fullname" . }}
  labels:
    app: {{ template "patroni.name" . }}
    chart: {{ template "patroni.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    application: {{ template "patroni.name" . }}
    cluster: {{ template "patroni.fullname" . }}
spec:
  serviceName: {{ template "patroni.fullname" . }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: OnDelete
  selector:
    matchLabels:
      app: {{ template "patroni.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "patroni.name" . }}
        release: {{ .Release.Name }}
        application: {{ template "patroni.name" . }}
        cluster: {{ template "patroni.fullname" . }}
    spec:
      serviceAccountName: {{ template "patroni.serviceAccountName" . }}
      containers:
        - name: spilo
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.image.init }}
          command:
            - '/bin/sh'
          args:
            - '/launch.sh'
            - init
          {{- else }}
          command:
            {{- toYaml .Values.image.command | nindent 12 }}
          args:
            {{- toYaml .Values.image.args | nindent 12 }}
          {{- end}}
          env:
            - name: DEBUG
              value: {{ .Values.debug | quote }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: DCS_ENABLE_KUBERNETES_API
              value: "true"
            - name: USE_KUBERNETES
              value: "true"
            - name: WAL_BUCKET_SCOPE_PREFIX
              value: ""
            {{- if .Values.useConfigMaps }}
            - name: KUBERNETES_USE_CONFIGMAPS
              value: "true"
            {{- end }}
            - name: PATRONI_CONFIGURATION_FILE
              value: /etc/patronictl/patronictl.yaml
            - name: SCOPE
              value: {{ template "patroni.fullname" . }}
            - name: PGPASSWORD_SUPERUSER
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-superuser
            - name: PGPASSWORD_ADMIN
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-admin
            - name: PGPASSWORD_STANDBY
              valueFrom:
                secretKeyRef:
                  name: {{ template "patroni.fullname" . }}
                  key: password-standby
            - name: PGROOT
              value: /home/postgres/pgdata

            {{ if .Values.walE.enabled }}
            - name: USE_WALE
              value: {{ .Values.walE.enabled | quote }}
            {{ if .Values.walE.envDir }}
            - name: WALE_ENV_DIR
              value: {{ .Values.walE.envDir | quote }}
            {{ end }}
            {{ if .Values.walE.scheduleCronJob }}
            - name: BACKUP_SCHEDULE
              value: {{ .Values.walE.scheduleCronJob | quote }}
            {{ end }}
            {{ if .Values.walE.retainBackups }}
            - name: BACKUP_NUM_TO_RETAIN
              value: {{ .Values.walE.retainBackups | quote }}
            {{ end }}
            {{ if .Values.walE.s3Bucket }}
            - name: WAL_S3_BUCKET
              value: {{ .Values.walE.s3Bucket | quote }}
            {{ else if .Values.walE.gcsBucket }}
            - name: WAL_GCS_BUCKET
              value: {{ .Values.walE.gcsBucket | quote }}
            {{ end }}
            {{ if .Values.walE.backupThresholdMegabytes }}
            - name: WALE_BACKUP_THRESHOLD_MEGABYTES
              value: {{ .Values.walE.backupThresholdMegabytes | quote }}
            {{ end }}
            {{ if .Values.walE.backupThresholdPercentage }}
            - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
              value: {{ .Values.walE.backupThresholdPercentage | quote }}
            {{ end }}
            {{ if .Values.gcloudCredentials.enabled }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/{{ .Values.walE.gcloudCredentials }}"
            {{ end }}
            {{ end }}

            {{ if .Values.cloneWithWale.enabled }}
            - name: CLONE_WAL_GCS_BUCKET
              value: {{ .Values.cloneWithWale.cloneWalGcsBucket | quote }}
            - name: CLONE_SCOPE
              value: {{ .Values.cloneWithWale.cloneScope | quote }}
            - name: CLONE_METHOD
              value: "CLONE_WITH_WALE"
            - name: CLONE_TARGET_TIME
              value: {{ .Values.cloneWithWale.cloneTargetTime | quote }}
            {{ if .Values.gcloudCredentials.enabled }}
            - name: CLONE_GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/{{ .Values.cloneWithWale.gcloudCredentials }}"
            {{ end }}
            {{ end }}

            {{ if .Values.walG.enabled }}
            - name: USE_WALG
              value: {{ .Values.walG.enabled | quote }}
            - name: USE_WALG_BACKUP
              value: {{ .Values.walG.enabled | quote }}
            {{ if .Values.walG.envDir }}
            - name: WALE_ENV_DIR
              value: {{ .Values.walG.envDir | quote }}
            {{ end }}
            {{ if .Values.walG.scheduleCronJob }}
            - name: BACKUP_SCHEDULE
              value: {{ .Values.walG.scheduleCronJob | quote }}
            {{ end }}
            {{ if .Values.walG.retainBackups }}
            - name: BACKUP_NUM_TO_RETAIN
              value: {{ .Values.walG.retainBackups | quote }}
            {{ end }}
            {{ if .Values.walG.s3Bucket }}
            - name: WAL_S3_BUCKET
              value: {{ .Values.walG.s3Bucket | quote }}
            {{ else if .Values.walG.gcsBucket }}
            - name: WAL_GCS_BUCKET
              value: {{ .Values.walG.gcsBucket | quote }}
            {{ end }}
            {{ if .Values.walG.backupThresholdMegabytes }}
            - name: WALE_BACKUP_THRESHOLD_MEGABYTES
              value: {{ .Values.walG.backupThresholdMegabytes | quote }}
            {{ end }}
            {{ if .Values.walG.backupThresholdPercentage }}
            - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
              value: {{ .Values.walG.backupThresholdPercentage | quote }}
            {{ end }}
            {{ if .Values.gcloudCredentials.enabled }}
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/{{ .Values.walG.gcloudCredentials }}"
            {{ end }}
            {{ end }}

            {{ if .Values.cloneWithWalG.enabled }}
            - name: CLONE_USE_WALG
              value: "true"
            - name: USE_WALG_RESTORE
              value: {{ .Values.cloneWithWalG.enabled | quote }}
            - name: CLONE_WAL_GCS_BUCKET
              value: {{ .Values.cloneWithWalG.cloneWalGcsBucket | quote }}
            - name: CLONE_SCOPE
              value: {{ .Values.cloneWithWalG.cloneScope | quote }}
            - name: CLONE_METHOD
              value: "CLONE_WITH_WALE"
            - name: CLONE_TARGET_TIME
              value: {{ .Values.cloneWithWalG.cloneTargetTime | quote }}
            {{ if .Values.gcloudCredentials.enabled }}
            - name: CLONE_GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/credentials/{{ .Values.cloneWithWalG.gcloudCredentials }}"
            {{ end }}
            {{ end }}

          ports:
            - containerPort: 8008
              name: patroni
              protocol: TCP
            - containerPort: 5432
              name: postgresql
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /home/postgres/pgdata
            - name: patroni-config
              mountPath: /etc/patronictl
            {{ if .Values.gcloudCredentials.enabled }}
            - name: {{ .Values.gcloudCredentials.secretName }}
              mountPath: /etc/credentials
              readOnly: true
            {{ end }}
      volumes:
        {{ if .Values.gcloudCredentials.enabled }}
        - name: {{ .Values.gcloudCredentials.secretName }}
          secret:
            secretName: {{ .Values.gcloudCredentials.secretName }}
        {{ end }}
        - name: patroni-config
          configMap:
            name: {{ template "patroni.fullname" . }}-configmap
      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{ end }}
      {{- if eq .Values.podAntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "patroni.name" . }}"
                  release: "{{ .Release.Name }}"
      {{- else if eq .Values.podAntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app: "{{ template "patroni.name" . }}"
                    release: "{{ .Release.Name }}"
      {{- end }}
  {{ if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      {{- if .Values.persistentVolume.annotations }}
        annotations:
          {{- toYaml .Values.persistentVolume.annotations | nindent 10 }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
        {{- if .Values.persistentVolume.storageClass }}
        {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        {{- end }}
        {{- end }}
        {{- else }}
        - name: datadir
          emptyDir: {}
{{- end }}
